/*
 * generated by Xtext 2.9.1
 */
package org.eclipse.emf.refactor.examples.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.refactor.examples.services.SimpleWebModelingLanguageGrammarAccess;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.Attribute;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.DataLayer;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.DataPage;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.Entity;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.HypertextLayer;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.IndexPage;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.Link;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.Reference;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.SimpleWebModelingLanguagePackage;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.StaticPage;
import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.WebModel;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SimpleWebModelingLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpleWebModelingLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpleWebModelingLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleWebModelingLanguagePackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.DATA_LAYER:
				sequence_DataLayer(context, (DataLayer) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.DATA_PAGE:
				sequence_DataPage(context, (DataPage) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.HYPERTEXT_LAYER:
				sequence_HypertextLayer(context, (HypertextLayer) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.INDEX_PAGE:
				sequence_IndexPage(context, (IndexPage) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.STATIC_PAGE:
				sequence_StaticPage(context, (StaticPage) semanticObject); 
				return; 
			case SimpleWebModelingLanguagePackage.WEB_MODEL:
				sequence_WebModel(context, (WebModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=SimpleType)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeSimpleTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataLayer returns DataLayer
	 *
	 * Constraint:
	 *     entities+=Entity*
	 */
	protected void sequence_DataLayer(ISerializationContext context, DataLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns DataPage
	 *     DynamicPage returns DataPage
	 *     DataPage returns DataPage
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID]? links+=Link*)
	 */
	protected void sequence_DataPage(ISerializationContext context, DataPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute* references+=Reference*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HypertextLayer returns HypertextLayer
	 *
	 * Constraint:
	 *     (pages+=Page+ startPage=[StaticPage|ID])
	 */
	protected void sequence_HypertextLayer(ISerializationContext context, HypertextLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns IndexPage
	 *     DynamicPage returns IndexPage
	 *     IndexPage returns IndexPage
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID]? links+=Link*)
	 */
	protected void sequence_IndexPage(ISerializationContext context, IndexPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     target=[Page|ID]
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.LINK__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.LINK__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getTargetPageIDTerminalRuleCall_1_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (name=ID type=[Entity|ID])
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.REFERENCE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.REFERENCE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.REFERENCE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReferenceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReferenceAccess().getTypeEntityIDTerminalRuleCall_3_0_1(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Page returns StaticPage
	 *     StaticPage returns StaticPage
	 *
	 * Constraint:
	 *     (name=ID links+=Link*)
	 */
	protected void sequence_StaticPage(ISerializationContext context, StaticPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebModel returns WebModel
	 *
	 * Constraint:
	 *     (name=ID dataLayer=DataLayer hypertextLayer=HypertextLayer)
	 */
	protected void sequence_WebModel(ISerializationContext context, WebModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__DATA_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__DATA_LAYER));
			if (transientValues.isValueTransient(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__HYPERTEXT_LAYER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleWebModelingLanguagePackage.Literals.WEB_MODEL__HYPERTEXT_LAYER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWebModelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWebModelAccess().getDataLayerDataLayerParserRuleCall_3_0(), semanticObject.getDataLayer());
		feeder.accept(grammarAccess.getWebModelAccess().getHypertextLayerHypertextLayerParserRuleCall_4_0(), semanticObject.getHypertextLayer());
		feeder.finish();
	}
	
	
}
