/**
 * generated by Xtext 2.9.1
 */
package org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.emf.refactor.examples.simpleWebModelingLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpleWebModelingLanguageFactoryImpl extends EFactoryImpl implements SimpleWebModelingLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SimpleWebModelingLanguageFactory init()
  {
    try
    {
      SimpleWebModelingLanguageFactory theSimpleWebModelingLanguageFactory = (SimpleWebModelingLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(SimpleWebModelingLanguagePackage.eNS_URI);
      if (theSimpleWebModelingLanguageFactory != null)
      {
        return theSimpleWebModelingLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SimpleWebModelingLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleWebModelingLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SimpleWebModelingLanguagePackage.WEB_MODEL: return createWebModel();
      case SimpleWebModelingLanguagePackage.DATA_LAYER: return createDataLayer();
      case SimpleWebModelingLanguagePackage.ENTITY: return createEntity();
      case SimpleWebModelingLanguagePackage.ATTRIBUTE: return createAttribute();
      case SimpleWebModelingLanguagePackage.REFERENCE: return createReference();
      case SimpleWebModelingLanguagePackage.HYPERTEXT_LAYER: return createHypertextLayer();
      case SimpleWebModelingLanguagePackage.PAGE: return createPage();
      case SimpleWebModelingLanguagePackage.STATIC_PAGE: return createStaticPage();
      case SimpleWebModelingLanguagePackage.LINK: return createLink();
      case SimpleWebModelingLanguagePackage.DYNAMIC_PAGE: return createDynamicPage();
      case SimpleWebModelingLanguagePackage.INDEX_PAGE: return createIndexPage();
      case SimpleWebModelingLanguagePackage.DATA_PAGE: return createDataPage();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SimpleWebModelingLanguagePackage.SIMPLE_TYPE:
        return createSimpleTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SimpleWebModelingLanguagePackage.SIMPLE_TYPE:
        return convertSimpleTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WebModel createWebModel()
  {
    WebModelImpl webModel = new WebModelImpl();
    return webModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataLayer createDataLayer()
  {
    DataLayerImpl dataLayer = new DataLayerImpl();
    return dataLayer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reference createReference()
  {
    ReferenceImpl reference = new ReferenceImpl();
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HypertextLayer createHypertextLayer()
  {
    HypertextLayerImpl hypertextLayer = new HypertextLayerImpl();
    return hypertextLayer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Page createPage()
  {
    PageImpl page = new PageImpl();
    return page;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StaticPage createStaticPage()
  {
    StaticPageImpl staticPage = new StaticPageImpl();
    return staticPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Link createLink()
  {
    LinkImpl link = new LinkImpl();
    return link;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DynamicPage createDynamicPage()
  {
    DynamicPageImpl dynamicPage = new DynamicPageImpl();
    return dynamicPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IndexPage createIndexPage()
  {
    IndexPageImpl indexPage = new IndexPageImpl();
    return indexPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataPage createDataPage()
  {
    DataPageImpl dataPage = new DataPageImpl();
    return dataPage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleType createSimpleTypeFromString(EDataType eDataType, String initialValue)
  {
    SimpleType result = SimpleType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSimpleTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleWebModelingLanguagePackage getSimpleWebModelingLanguagePackage()
  {
    return (SimpleWebModelingLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SimpleWebModelingLanguagePackage getPackage()
  {
    return SimpleWebModelingLanguagePackage.eINSTANCE;
  }

} //SimpleWebModelingLanguageFactoryImpl
