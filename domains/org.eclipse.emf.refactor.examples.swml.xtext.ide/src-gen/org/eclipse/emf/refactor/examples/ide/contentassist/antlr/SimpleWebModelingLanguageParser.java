/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.eclipse.emf.refactor.examples.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.emf.refactor.examples.ide.contentassist.antlr.internal.InternalSimpleWebModelingLanguageParser;
import org.eclipse.emf.refactor.examples.services.SimpleWebModelingLanguageGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SimpleWebModelingLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SimpleWebModelingLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SimpleWebModelingLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPageAccess().getAlternatives(), "rule__Page__Alternatives");
			builder.put(grammarAccess.getDynamicPageAccess().getAlternatives(), "rule__DynamicPage__Alternatives");
			builder.put(grammarAccess.getSimpleTypeAccess().getAlternatives(), "rule__SimpleType__Alternatives");
			builder.put(grammarAccess.getWebModelAccess().getGroup(), "rule__WebModel__Group__0");
			builder.put(grammarAccess.getDataLayerAccess().getGroup(), "rule__DataLayer__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
			builder.put(grammarAccess.getHypertextLayerAccess().getGroup(), "rule__HypertextLayer__Group__0");
			builder.put(grammarAccess.getStaticPageAccess().getGroup(), "rule__StaticPage__Group__0");
			builder.put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
			builder.put(grammarAccess.getIndexPageAccess().getGroup(), "rule__IndexPage__Group__0");
			builder.put(grammarAccess.getIndexPageAccess().getGroup_2(), "rule__IndexPage__Group_2__0");
			builder.put(grammarAccess.getDataPageAccess().getGroup(), "rule__DataPage__Group__0");
			builder.put(grammarAccess.getDataPageAccess().getGroup_2(), "rule__DataPage__Group_2__0");
			builder.put(grammarAccess.getWebModelAccess().getNameAssignment_1(), "rule__WebModel__NameAssignment_1");
			builder.put(grammarAccess.getWebModelAccess().getDataLayerAssignment_3(), "rule__WebModel__DataLayerAssignment_3");
			builder.put(grammarAccess.getWebModelAccess().getHypertextLayerAssignment_4(), "rule__WebModel__HypertextLayerAssignment_4");
			builder.put(grammarAccess.getDataLayerAccess().getEntitiesAssignment_2(), "rule__DataLayer__EntitiesAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_3(), "rule__Entity__AttributesAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getReferencesAssignment_4(), "rule__Entity__ReferencesAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_3(), "rule__Attribute__TypeAssignment_3");
			builder.put(grammarAccess.getReferenceAccess().getNameAssignment_1(), "rule__Reference__NameAssignment_1");
			builder.put(grammarAccess.getReferenceAccess().getTypeAssignment_3(), "rule__Reference__TypeAssignment_3");
			builder.put(grammarAccess.getHypertextLayerAccess().getPagesAssignment_1(), "rule__HypertextLayer__PagesAssignment_1");
			builder.put(grammarAccess.getHypertextLayerAccess().getStartPageAssignment_3(), "rule__HypertextLayer__StartPageAssignment_3");
			builder.put(grammarAccess.getStaticPageAccess().getNameAssignment_1(), "rule__StaticPage__NameAssignment_1");
			builder.put(grammarAccess.getStaticPageAccess().getLinksAssignment_3(), "rule__StaticPage__LinksAssignment_3");
			builder.put(grammarAccess.getLinkAccess().getTargetAssignment_1(), "rule__Link__TargetAssignment_1");
			builder.put(grammarAccess.getIndexPageAccess().getNameAssignment_1(), "rule__IndexPage__NameAssignment_1");
			builder.put(grammarAccess.getIndexPageAccess().getEntityAssignment_2_1(), "rule__IndexPage__EntityAssignment_2_1");
			builder.put(grammarAccess.getIndexPageAccess().getLinksAssignment_4(), "rule__IndexPage__LinksAssignment_4");
			builder.put(grammarAccess.getDataPageAccess().getNameAssignment_1(), "rule__DataPage__NameAssignment_1");
			builder.put(grammarAccess.getDataPageAccess().getEntityAssignment_2_1(), "rule__DataPage__EntityAssignment_2_1");
			builder.put(grammarAccess.getDataPageAccess().getLinksAssignment_4(), "rule__DataPage__LinksAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SimpleWebModelingLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalSimpleWebModelingLanguageParser createParser() {
		InternalSimpleWebModelingLanguageParser result = new InternalSimpleWebModelingLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimpleWebModelingLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimpleWebModelingLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
