<?xml version="1.0" encoding="UTF-8"?>
<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel" copyrightText="(c), Christopher Pietsch, Software Engineering Group, University of Siegen 2017 all rights reserved"
    modelDirectory="/org.sidiff.slicer.rulebased.slice/src" modelPluginID="org.sidiff.slicer.rulebased.slice"
    modelName="RuleBasedSlice" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
    importerID="org.eclipse.emf.importer.ecore" complianceLevel="8.0" usedGenPackages="../../org.sidiff.difference.asymmetric/model/Asymmetric.genmodel#//asymmetric ../../org.eclipse.emf.ecore/model/Ecore.genmodel#//ecore ../../org.sidiff.entities/model/EntitiesModel.genmodel#//entities ../../org.sidiff.formula/model/Formula.genmodel#//formula ../../org.sidiff.matching.model/model/MatchingModel.genmodel#//model ../../org.sidiff.slicer.slice/model/Slice.genmodel#//slice ../../org.sidiff.difference.symmetric/model/Symmetric.genmodel#//symmetric"
    operationReflection="true" importOrganizing="true">
  <foreignModel>RuleBasedSlice.ecore</foreignModel>
  <genPackages prefix="RuleBasedSlice" basePackage="org.sidiff.slicer.rulebased" disposableProviderFactory="true"
      loadInitialization="true" ecorePackage="RuleBasedSlice.ecore#/">
    <genClasses ecoreClass="RuleBasedSlice.ecore#//ExecutableModelSlice">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference RuleBasedSlice.ecore#//ExecutableModelSlice/asymmetricDifference"/>
      <genOperations ecoreOperation="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize"
          body="String absolute_path = path; String modelslice_name = &quot;ExecutableSlice.slice&quot;; String symmetricdiff_name = &quot;ExecutableSlice.&quot; + AsymmetricDiffFacade.SYMMETRIC_DIFF_EXT; String asymmetricdiff_name = &quot;ExecutableSlice.&quot; + AsymmetricDiffFacade.ASYMMETRIC_DIFF_EXT; String foldername = &quot;RuleBasedSlice&quot;; String separator = File.separator; for (SlicedElement slicedElement : this.getSlicedElements()) { if(!slicedElement.isFromReg()){ slicedElement.setObject(null); } } if (!absolute_path.endsWith(separator)) { absolute_path += separator; } absolute_path += foldername; SymmetricDifference symmetricDifference = this.getAsymmetricDifference().getSymmetricDifference(); symmetricDifference.getMatching().setUriA(modelslice_name); symmetricDifference.getMatching().setUriB(modelslice_name); symmetricDifference.setUriModelA(modelslice_name); symmetricDifference.setUriModelB(modelslice_name); AsymmetricDifference asymmetricDifference = this.getAsymmetricDifference(); asymmetricDifference.setUriOriginModel(modelslice_name); asymmetricDifference.setUriChangedModel(modelslice_name); ResourceSet resourceSet = new ResourceSetImpl(); String resSymDiffSavePath = absolute_path + separator + symmetricdiff_name; resourceSet.createResource(EMFStorage.pathToUri(resSymDiffSavePath)).getContents().add(symmetricDifference); String resAsymDiffSavePath = absolute_path + separator + asymmetricdiff_name; resourceSet.createResource(EMFStorage.pathToUri(resAsymDiffSavePath)).getContents().add(asymmetricDifference); String resModelSliceSavePath = absolute_path + separator + modelslice_name; resourceSet.createResource(EMFStorage.pathToUri(resModelSliceSavePath)).getContents().add(this); for (Resource resource : resourceSet.getResources()) { try { resource.save(null); } catch (IOException e) { e.printStackTrace(); } } if (zip) { ZipUtil.zip(absolute_path, absolute_path, AsymmetricDiffFacade.PATCH_EXTENSION); FileOperations.removeFolder(absolute_path); }  return zip? absolute_path + &quot;.&quot; + AsymmetricDiffFacade.PATCH_EXTENSION: absolute_path;">
        <genParameters ecoreParameter="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize/path"/>
        <genParameters ecoreParameter="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize/zip"/>
      </genOperations>
    </genClasses>
  </genPackages>
</genmodel:GenModel>
