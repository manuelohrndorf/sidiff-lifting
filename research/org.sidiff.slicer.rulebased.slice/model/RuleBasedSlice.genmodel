<?xml version="1.0" encoding="UTF-8"?>
<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel"
    modelDirectory="/org.sidiff.slicer.rulebased.slice/src-gen" creationIcons="false"
    editDirectory="/org.sidiff.slicer.rulebased.slice.edit/src-gen" editorDirectory="/org.sidiff.slicer.rulebased.slice.editor/src-gen"
    modelPluginID="org.sidiff.slicer.rulebased.slice" modelName="RuleBasedSlice" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
    codeFormatting="true" importerID="org.eclipse.emf.importer.ecore" complianceLevel="8.0"
    copyrightFields="false" usedGenPackages="../../org.sidiff.difference.asymmetric/model/Asymmetric.genmodel#//asymmetric platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel#//ecore ../../org.sidiff.entities/model/EntitiesModel.genmodel#//entities ../../org.sidiff.formula/model/Formula.genmodel#//formula ../../org.sidiff.matching.model/model/MatchingModel.genmodel#//model ../../org.sidiff.slicer.slice/model/Slice.genmodel#//slice ../../org.sidiff.difference.symmetric/model/Symmetric.genmodel#//symmetric"
    operationReflection="true" importOrganizing="true">
  <foreignModel>RuleBasedSlice.ecore</foreignModel>
  <testsDirectory xsi:nil="true"/>
  <genPackages prefix="RuleBasedSlice" basePackage="org.sidiff.slicer.rulebased" disposableProviderFactory="true"
      ecorePackage="RuleBasedSlice.ecore#/">
    <genClasses ecoreClass="RuleBasedSlice.ecore#//ExecutableModelSlice">
      <genFeatures property="None" notify="false" children="true" createChild="false"
          ecoreFeature="ecore:EReference RuleBasedSlice.ecore#//ExecutableModelSlice/asymmetricDifference"/>
      <genOperations ecoreOperation="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize"
          body="String MODELSLICE_NAME = &quot;ExecutableSlice.slice&quot;;  String SYMMETRICDIFF_NAME = &quot;ExecutableSlice.&quot; + AsymmetricDiffFacade.SYMMETRIC_DIFF_EXT;  String ASYMMETRICDIFF_NAME = &quot;ExecutableSlice.&quot; + AsymmetricDiffFacade.ASYMMETRIC_DIFF_EXT;  String FOLDERNAME = &quot;RuleBasedSlice&quot;;  String SEPARATOR = File.separator;  for(SlicedElement slicedElement : this.getSlicedElements()) { slicedElement.setObject(null); }  if (!path.endsWith(SEPARATOR)) { path += SEPARATOR; }  path += FOLDERNAME;  SymmetricDifference symmetricDifference = this.getAsymmetricDifference().getSymmetricDifference(); symmetricDifference.getMatching().setUriA(MODELSLICE_NAME); symmetricDifference.getMatching().setUriB(MODELSLICE_NAME); symmetricDifference.setUriModelA(MODELSLICE_NAME); symmetricDifference.setUriModelB(MODELSLICE_NAME);  AsymmetricDifference asymmetricDifference = this.getAsymmetricDifference(); asymmetricDifference.setUriOriginModel(MODELSLICE_NAME); asymmetricDifference.setUriChangedModel(MODELSLICE_NAME);  String resSymDiffSavePath = path + SEPARATOR + SYMMETRICDIFF_NAME;  EMFStorage.eSaveAs(EMFStorage.pathToUri(resSymDiffSavePath), symmetricDifference, true);  String resAsymDiffSavePath = path + SEPARATOR + ASYMMETRICDIFF_NAME;  EMFStorage.eSaveAs(EMFStorage.pathToUri(resAsymDiffSavePath), asymmetricDifference, true);  String resModelSliceSavePath = path + SEPARATOR + MODELSLICE_NAME;  EMFStorage.eSaveAs(EMFStorage.pathToUri(resModelSliceSavePath), this, true);  if(zip) { ZipUtil.zip(path, path, AsymmetricDiffFacade.PATCH_EXTENSION); FileOperations.removeFolder(path); }">
        <genParameters ecoreParameter="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize/path"/>
        <genParameters ecoreParameter="RuleBasedSlice.ecore#//ExecutableModelSlice/serialize/zip"/>
      </genOperations>
    </genClasses>
  </genPackages>
</genmodel:GenModel>
