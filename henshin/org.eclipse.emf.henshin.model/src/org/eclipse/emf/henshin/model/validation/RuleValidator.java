/**
 *
 * $Id$
 */
package org.eclipse.emf.henshin.model.validation;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.henshin.model.AttributeCondition;
import org.eclipse.emf.henshin.model.Graph;
import org.eclipse.emf.henshin.model.Join;
import org.eclipse.emf.henshin.model.Mapping;
import org.eclipse.emf.henshin.model.Rule;
import org.eclipse.emf.henshin.model.Split;

/**
 * A sample validator interface for {@link org.eclipse.emf.henshin.model.Rule}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface RuleValidator {
	boolean validate();

	boolean validateLhs(Graph value);
	boolean validateRhs(Graph value);
	boolean validateAttributeConditions(EList<AttributeCondition> value);
	boolean validateMappings(EList<Mapping> value);
	boolean validateCheckDangling(boolean value);
	boolean validateInjectiveMatching(boolean value);
	boolean validateMultiRules(EList<Rule> value);
	boolean validateMultiMappings(EList<Mapping> value);
	boolean validateJavaImports(EList<String> value);
	boolean validateSplits(EList<Split> value);
	boolean validateJoins(EList<Join> value);
}
