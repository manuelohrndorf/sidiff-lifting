diff --git a/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/impl/EngineImpl.java b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/impl/EngineImpl.java
index 084b443..047226e 100644
--- a/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/impl/EngineImpl.java
+++ b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/impl/EngineImpl.java
@@ -63,6 +63,7 @@
 import org.eclipse.emf.henshin.interpreter.matching.conditions.XorFormula;
 import org.eclipse.emf.henshin.interpreter.matching.constraints.BinaryConstraint;
 import org.eclipse.emf.henshin.interpreter.matching.constraints.DomainSlot;
+import org.eclipse.emf.henshin.interpreter.matching.constraints.ReferenceConstraint;
 import org.eclipse.emf.henshin.interpreter.matching.constraints.Solution;
 import org.eclipse.emf.henshin.interpreter.matching.constraints.SolutionFinder;
 import org.eclipse.emf.henshin.interpreter.matching.constraints.TypeConstraint.PartitionThread;
@@ -1178,6 +1179,19 @@
 			workerPool = null;
 		}
 	}
+	
+	/**
+	 * Creates a user defined cross-reference constraint.
+	 * 
+	 * @param referenceSource
+	 *            The the source variable w.r.t. the given outgoing edge.
+	 * @param edge
+	 *            An edge with no EOpposite.
+	 * @return The created constraint.
+	 */
+	public ReferenceConstraint createCrossReferenceConstraint(Variable referenceSource, Edge edge) {
+		return null;
+	}
 
 	/**
 	 * Create user constraints for a node.
@@ -1208,5 +1222,4 @@
 	public UnaryConstraint createUserConstraints(Attribute attribute) {
 		return null;
 	}
-
 }
diff --git a/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/info/VariableInfo.java b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/info/VariableInfo.java
index de54a70..febb59a 100644
--- a/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/info/VariableInfo.java
+++ b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/info/VariableInfo.java
@@ -176,6 +176,13 @@
 				ReferenceConstraint constraint = new ReferenceConstraint(target, edge.getType().getEOpposite(), null,
 						true);
 				var.referenceConstraints.add(constraint);
+			} else {
+				Variable target = node2variable.get(edge.getSource());
+				ReferenceConstraint constraint = engine.createCrossReferenceConstraint(target, edge);
+				
+				if (constraint != null) {
+					var.referenceConstraints.add(constraint);
+				}
 			}
 		}
 
diff --git a/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/matching/constraints/CrossReferenceConstraint.java b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/matching/constraints/CrossReferenceConstraint.java
new file mode 100644
index 0000000..b84f55b
--- /dev/null
+++ b/henshin_1-2/org.eclipse.emf.henshin.interpreter/src/org/eclipse/emf/henshin/interpreter/matching/constraints/CrossReferenceConstraint.java
@@ -0,0 +1,82 @@
+package org.eclipse.emf.henshin.interpreter.matching.constraints;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.henshin.model.Edge;
+
+public abstract class CrossReferenceConstraint extends ReferenceConstraint {
+
+	/**
+	 * The edge that have to be check in reverse direction.
+	 */
+	private Edge incoming;
+	
+	/**
+	 * Convenience constructor.
+	 * 
+	 * @param referenceSource
+	 *            The the source variable w.r.t. the given outgoing edge.
+	 * @param incoming
+	 *            An edge with no EOpposite.
+	 */
+	public CrossReferenceConstraint(Variable referenceSource, Edge outgoing) {
+		super(referenceSource, outgoing.getType());
+		this.incoming = outgoing;
+	}
+	
+	@Override
+	public boolean check(DomainSlot referenceTarget, DomainSlot referenceSource) {
+		
+		// Inverse matching:
+		// [referenceTarget] <- [referenceSource]
+		
+		// Source variable must be locked:
+		if (!referenceTarget.locked) {
+			return false;
+		}
+		
+		// Target domain slot not locked yet?
+		if (!referenceSource.locked) {
+			
+			// Get the target objects:
+			Collection<? extends EObject> targetObjects = getCrossReferenced(referenceTarget.value, incoming);
+			
+			if (targetObjects != null) {
+				
+				// Create a domain change to restrict the target domain:
+				DomainChange change = new DomainChange(referenceSource, referenceSource.temporaryDomain);
+				referenceTarget.remoteChangeMap.put(this, change);
+				
+				// Calculated temporary domain:
+				referenceSource.temporaryDomain = new ArrayList<EObject>(targetObjects);
+				
+				if (change.originalValues!=null) {
+					referenceSource.temporaryDomain.retainAll(change.originalValues);
+				}
+				
+				// Temporary domain must not be empty:
+				return !referenceSource.temporaryDomain.isEmpty();
+			}
+		} else {
+			return true;
+		}
+		
+		return false;
+	}
+	
+	/**
+	 * Calculates all cross-references: [incoming.getTarget() / target] <-
+	 * incoming - [incoming.getSource() / ?]
+	 * 
+	 * @param target
+	 *            The target of an edge with no EOpposite.
+	 * @param incoming
+	 *            The edge that have to be check in reverse direction.
+	 * @return A fresh and modifiable list of the objects that references the
+	 *         given target object.
+	 */
+	public abstract List<EObject> getCrossReferenced(EObject target, Edge incoming);
+}
