/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.emf.henshin.text.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.henshin.text.henshin_text.Attribute;
import org.eclipse.emf.henshin.text.henshin_text.Call;
import org.eclipse.emf.henshin.text.henshin_text.CheckDangling;
import org.eclipse.emf.henshin.text.henshin_text.ConditionEdge;
import org.eclipse.emf.henshin.text.henshin_text.ConditionEdges;
import org.eclipse.emf.henshin.text.henshin_text.ConditionGraph;
import org.eclipse.emf.henshin.text.henshin_text.ConditionGraphElements;
import org.eclipse.emf.henshin.text.henshin_text.ConditionNode;
import org.eclipse.emf.henshin.text.henshin_text.ConditionReuseNode;
import org.eclipse.emf.henshin.text.henshin_text.ConditionalUnit;
import org.eclipse.emf.henshin.text.henshin_text.Conditions;
import org.eclipse.emf.henshin.text.henshin_text.EPackageImport;
import org.eclipse.emf.henshin.text.henshin_text.Edge;
import org.eclipse.emf.henshin.text.henshin_text.Edges;
import org.eclipse.emf.henshin.text.henshin_text.Expression;
import org.eclipse.emf.henshin.text.henshin_text.Formula;
import org.eclipse.emf.henshin.text.henshin_text.Graph;
import org.eclipse.emf.henshin.text.henshin_text.GraphElements;
import org.eclipse.emf.henshin.text.henshin_text.IndependentUnit;
import org.eclipse.emf.henshin.text.henshin_text.InjectiveMatching;
import org.eclipse.emf.henshin.text.henshin_text.IteratedUnit;
import org.eclipse.emf.henshin.text.henshin_text.JavaImport;
import org.eclipse.emf.henshin.text.henshin_text.LoopUnit;
import org.eclipse.emf.henshin.text.henshin_text.Match;
import org.eclipse.emf.henshin.text.henshin_text.Model;
import org.eclipse.emf.henshin.text.henshin_text.ModelElement;
import org.eclipse.emf.henshin.text.henshin_text.MultiRule;
import org.eclipse.emf.henshin.text.henshin_text.MultiRuleReuseNode;
import org.eclipse.emf.henshin.text.henshin_text.Node;
import org.eclipse.emf.henshin.text.henshin_text.Parameter;
import org.eclipse.emf.henshin.text.henshin_text.PriorityUnit;
import org.eclipse.emf.henshin.text.henshin_text.Rollback;
import org.eclipse.emf.henshin.text.henshin_text.Rule;
import org.eclipse.emf.henshin.text.henshin_text.RuleElement;
import org.eclipse.emf.henshin.text.henshin_text.Strict;
import org.eclipse.emf.henshin.text.henshin_text.Unit;
import org.eclipse.emf.henshin.text.henshin_text.UnitElement;
import org.eclipse.emf.henshin.text.services.Henshin_textGrammarAccess;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.IHiddenRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionFinder;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class Henshin_textFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private Henshin_textGrammarAccess _henshin_textGrammarAccess;
  
  private EList<Match> el;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<EPackageImport> _ePackageimports = model.getEPackageimports();
    final EPackageImport lastImport = IterableExtensions.<EPackageImport>last(_ePackageimports);
    EList<EPackageImport> _ePackageimports_1 = model.getEPackageimports();
    for (final EPackageImport ePackageimport : _ePackageimports_1) {
      {
        document.<EPackageImport>format(ePackageimport);
        if ((ePackageimport == lastImport)) {
          final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
            it.setNewLines(2);
          };
          document.<EPackageImport>append(ePackageimport, _function);
        } else {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.setNewLines(1);
          };
          document.<EPackageImport>append(ePackageimport, _function_1);
        }
      }
    }
    EList<ModelElement> _transformationsystem = model.getTransformationsystem();
    for (final ModelElement transformationsystem : _transformationsystem) {
      document.<ModelElement>format(transformationsystem);
    }
  }
  
  protected void _format(final EPackageImport ePackageImport, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(ePackageImport);
    ISemanticRegion _keyword = _regionFor.keyword("ePackageImport");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function);
  }
  
  protected void _format(final Rule rule, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = rule.getParameters();
    for (final Parameter parameters : _parameters) {
      document.<Parameter>format(parameters);
    }
    EList<RuleElement> _ruleElements = rule.getRuleElements();
    for (final RuleElement ruleElements : _ruleElements) {
      document.<RuleElement>format(ruleElements);
    }
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_2, _function_2);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<Rule>surround(rule, _function_4);
  }
  
  protected void _format(final MultiRule rule, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<MultiRule>surround(rule, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<MultiRule>surround(rule, _function_1);
    EList<RuleElement> _multiruleElements = rule.getMultiruleElements();
    for (final RuleElement ruleElements : _multiruleElements) {
      document.<RuleElement>format(ruleElements);
    }
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_2, _function_4);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(rule);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1);
    };
    document.<MultiRule>surround(rule, _function_6);
  }
  
  protected void _format(final JavaImport javaImport, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<JavaImport>surround(javaImport, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(javaImport);
    ISemanticRegion _keyword = _regionFor.keyword("javaImport");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<JavaImport>append(javaImport, _function_2);
  }
  
  protected void _format(final CheckDangling checkDangling, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<CheckDangling>surround(checkDangling, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(checkDangling);
    ISemanticRegion _keyword = _regionFor.keyword("checkDangling");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<CheckDangling>append(checkDangling, _function_2);
  }
  
  protected void _format(final InjectiveMatching injectiveMatching, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<InjectiveMatching>surround(injectiveMatching, _function);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(injectiveMatching);
    ISemanticRegion _keyword = _regionFor.keyword("checkDangling");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<InjectiveMatching>append(injectiveMatching, _function_2);
  }
  
  protected void _format(final Graph graph, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Graph>surround(graph, _function);
    EList<GraphElements> _graphElements = graph.getGraphElements();
    boolean _isEmpty = _graphElements.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(graph);
      ISemanticRegion _keyword = _regionFor.keyword("{");
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(_keyword, _function_1);
    }
    EList<GraphElements> _graphElements_1 = graph.getGraphElements();
    for (final GraphElements el : _graphElements_1) {
      document.<GraphElements>format(el);
    }
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(graph);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword_1, _function_2);
    EList<GraphElements> _graphElements_2 = graph.getGraphElements();
    boolean _isEmpty_1 = _graphElements_2.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(graph);
      ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(_keyword_2, _function_3);
    }
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Graph>surround(graph, _function_4);
  }
  
  protected void _format(final ConditionGraph graph, @Extension final IFormattableDocument document) {
    EList<ConditionGraphElements> _conditionGraphElements = graph.getConditionGraphElements();
    boolean _isEmpty = _conditionGraphElements.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(graph);
      ISemanticRegion _keyword = _regionFor.keyword("{");
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(_keyword, _function);
    }
    EList<ConditionGraphElements> _conditionGraphElements_1 = graph.getConditionGraphElements();
    for (final ConditionGraphElements el : _conditionGraphElements_1) {
      document.<ConditionGraphElements>format(el);
    }
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(graph);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword_1, _function_1);
    EList<ConditionGraphElements> _conditionGraphElements_2 = graph.getConditionGraphElements();
    boolean _isEmpty_1 = _conditionGraphElements_2.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(graph);
      ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(_keyword_2, _function_2);
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionGraph>surround(graph, _function_3);
  }
  
  protected void _format(final Node node, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Node>surround(node, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Node>surround(node, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    EList<Attribute> _attribute = node.getAttribute();
    for (final EObject attr : _attribute) {
      document.<EObject>format(attr);
    }
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
  }
  
  protected void _format(final Attribute attribute, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Attribute>surround(attribute, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Attribute>surround(attribute, _function_1);
  }
  
  protected void _format(final Match match, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Match>surround(match, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Match>surround(match, _function_1);
  }
  
  protected void _format(final ConditionNode node, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionNode>surround(node, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionNode>surround(node, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    EList<Match> _attribute = node.getAttribute();
    for (final EObject attr : _attribute) {
      document.<EObject>format(attr);
    }
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
  }
  
  protected void _format(final Edges edges, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Edges>surround(edges, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Edges>surround(edges, _function_1);
    EList<Edge> _edges = edges.getEdges();
    final Edge first = _edges.get(0);
    EList<Edge> _edges_1 = edges.getEdges();
    for (final Edge e : _edges_1) {
      if ((e != first)) {
        document.<Edge>format(e);
      }
    }
  }
  
  protected void _format(final Edge edge, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Edge>surround(edge, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Edge>prepend(edge, _function_1);
    IHiddenRegion _previousHiddenRegion = this.textRegionExtensions.previousHiddenRegion(edge);
    ISemanticRegionFinder _immediatelyPreceding = _previousHiddenRegion.immediatelyPreceding();
    ISemanticRegion _keyword = _immediatelyPreceding.keyword(",");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function_2);
  }
  
  protected void _format(final ConditionEdges edges, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionEdges>surround(edges, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionEdges>surround(edges, _function_1);
    EList<ConditionEdge> _edges = edges.getEdges();
    final ConditionEdge first = _edges.get(0);
    EList<ConditionEdge> _edges_1 = edges.getEdges();
    for (final ConditionEdge e : _edges_1) {
      if ((e != first)) {
        document.<ConditionEdge>format(e);
      }
    }
  }
  
  protected void _format(final ConditionEdge edge, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionEdge>surround(edge, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionEdge>prepend(edge, _function_1);
    IHiddenRegion _previousHiddenRegion = this.textRegionExtensions.previousHiddenRegion(edge);
    ISemanticRegionFinder _immediatelyPreceding = _previousHiddenRegion.immediatelyPreceding();
    ISemanticRegion _keyword = _immediatelyPreceding.keyword(",");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function_2);
  }
  
  protected void _format(final Conditions conditions, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Conditions>surround(conditions, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Conditions>surround(conditions, _function_1);
    EList<Expression> _attributeConditions = conditions.getAttributeConditions();
    final Expression first = _attributeConditions.get(0);
    EList<Expression> _attributeConditions_1 = conditions.getAttributeConditions();
    for (final Expression e : _attributeConditions_1) {
      if ((e != first)) {
        document.<Expression>format(e);
      }
    }
  }
  
  protected void _format(final Expression expression, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Expression>surround(expression, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Expression>prepend(expression, _function_1);
    IHiddenRegion _previousHiddenRegion = this.textRegionExtensions.previousHiddenRegion(expression);
    ISemanticRegionFinder _immediatelyPreceding = _previousHiddenRegion.immediatelyPreceding();
    ISemanticRegion _keyword = _immediatelyPreceding.keyword(",");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function_2);
  }
  
  protected void _format(final ConditionReuseNode node, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionReuseNode>surround(node, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionReuseNode>surround(node, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    EList<Match> _attribute = node.getAttribute();
    for (final EObject attr : _attribute) {
      document.<EObject>format(attr);
    }
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
  }
  
  protected void _format(final MultiRuleReuseNode node, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<MultiRuleReuseNode>surround(node, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<MultiRuleReuseNode>surround(node, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    EList<Attribute> _attribute = node.getAttribute();
    for (final EObject attr : _attribute) {
      document.<EObject>format(attr);
    }
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(node);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
  }
  
  protected void _format(final Formula formula, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Formula>surround(formula, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Formula>surround(formula, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(formula);
    ISemanticRegion _keyword = _regionFor.keyword("formula");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(formula);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("formula");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.surround(_keyword_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(formula);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_2, _function_4);
    EList<ConditionGraph> _conditionGraphs = formula.getConditionGraphs();
    for (final ConditionGraph g : _conditionGraphs) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<ConditionGraph>prepend(g, _function_5);
        document.<ConditionGraph>format(g);
      }
    }
  }
  
  protected void _format(final Unit unit, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = unit.getParameters();
    for (final Parameter parameters : _parameters) {
      document.<Parameter>format(parameters);
    }
    EList<UnitElement> _unitElements = unit.getUnitElements();
    for (final UnitElement unitElement : _unitElements) {
      document.<UnitElement>format(unitElement);
    }
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_1, _function_1);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_2, _function_2);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_3, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<Unit>surround(unit, _function_4);
  }
  
  protected void _format(final UnitElement unitElement, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<UnitElement>surround(unitElement, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<UnitElement>surround(unitElement, _function_1);
    EList<UnitElement> _subSequence = unitElement.getSubSequence();
    for (final UnitElement el : _subSequence) {
      document.<UnitElement>format(el);
    }
  }
  
  protected void _format(final Call call, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Call>surround(call, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Call>surround(call, _function_1);
  }
  
  protected void _format(final ConditionalUnit unit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionalUnit>surround(unit, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ConditionalUnit>surround(unit, _function_1);
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_3, _function_5);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_4, _function_6);
    ISemanticRegionsFinder _regionFor_5 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_5 = _regionFor_5.keyword("else");
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword_5, _function_7);
    EList<UnitElement> _if = unit.getIf();
    document.<EList<UnitElement>>format(_if);
    EList<UnitElement> _then = unit.getThen();
    for (final UnitElement el : _then) {
      document.<UnitElement>format(el);
    }
    EList<UnitElement> _else = unit.getElse();
    for (final UnitElement el_1 : _else) {
      document.<UnitElement>format(el_1);
    }
  }
  
  protected void _format(final PriorityUnit unit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<PriorityUnit>surround(unit, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<PriorityUnit>surround(unit, _function_1);
    EList<UnitElement> _subSequence = unit.getSubSequence();
    for (final UnitElement el : _subSequence) {
      document.<UnitElement>format(el);
    }
  }
  
  protected void _format(final IndependentUnit unit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<IndependentUnit>surround(unit, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<IndependentUnit>surround(unit, _function_1);
    EList<UnitElement> _subSequence = unit.getSubSequence();
    for (final UnitElement el : _subSequence) {
      document.<UnitElement>format(el);
    }
  }
  
  protected void _format(final LoopUnit unit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<LoopUnit>surround(unit, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<LoopUnit>surround(unit, _function_1);
    EList<UnitElement> _subElement = unit.getSubElement();
    for (final UnitElement el : _subElement) {
      document.<UnitElement>format(el);
    }
  }
  
  protected void _format(final IteratedUnit unit, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<IteratedUnit>surround(unit, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<IteratedUnit>surround(unit, _function_1);
    EList<UnitElement> _subElement = unit.getSubElement();
    for (final UnitElement el : _subElement) {
      document.<UnitElement>format(el);
    }
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword = _regionFor.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(_keyword, _function_2);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("(");
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(_keyword_1, _function_3);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_2 = _regionFor_2.keyword(")");
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(_keyword_2, _function_4);
    ISemanticRegionsFinder _regionFor_3 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_3 = _regionFor_3.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(_keyword_3, _function_5);
    ISemanticRegionsFinder _regionFor_4 = this.textRegionExtensions.regionFor(unit);
    ISemanticRegion _keyword_4 = _regionFor_4.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(_keyword_4, _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1);
    };
    document.<IteratedUnit>surround(unit, _function_7);
  }
  
  protected void _format(final Strict strict, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Strict>surround(strict, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Strict>surround(strict, _function_1);
  }
  
  protected void _format(final Rollback rollback, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Rollback>surround(rollback, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Rollback>surround(rollback, _function_1);
  }
  
  public void format(final Object rollback, final IFormattableDocument document) {
    if (rollback instanceof Rollback) {
      _format((Rollback)rollback, document);
      return;
    } else if (rollback instanceof Strict) {
      _format((Strict)rollback, document);
      return;
    } else if (rollback instanceof XtextResource) {
      _format((XtextResource)rollback, document);
      return;
    } else if (rollback instanceof Call) {
      _format((Call)rollback, document);
      return;
    } else if (rollback instanceof CheckDangling) {
      _format((CheckDangling)rollback, document);
      return;
    } else if (rollback instanceof ConditionEdges) {
      _format((ConditionEdges)rollback, document);
      return;
    } else if (rollback instanceof ConditionNode) {
      _format((ConditionNode)rollback, document);
      return;
    } else if (rollback instanceof ConditionReuseNode) {
      _format((ConditionReuseNode)rollback, document);
      return;
    } else if (rollback instanceof ConditionalUnit) {
      _format((ConditionalUnit)rollback, document);
      return;
    } else if (rollback instanceof Conditions) {
      _format((Conditions)rollback, document);
      return;
    } else if (rollback instanceof Edges) {
      _format((Edges)rollback, document);
      return;
    } else if (rollback instanceof Formula) {
      _format((Formula)rollback, document);
      return;
    } else if (rollback instanceof Graph) {
      _format((Graph)rollback, document);
      return;
    } else if (rollback instanceof IndependentUnit) {
      _format((IndependentUnit)rollback, document);
      return;
    } else if (rollback instanceof InjectiveMatching) {
      _format((InjectiveMatching)rollback, document);
      return;
    } else if (rollback instanceof IteratedUnit) {
      _format((IteratedUnit)rollback, document);
      return;
    } else if (rollback instanceof JavaImport) {
      _format((JavaImport)rollback, document);
      return;
    } else if (rollback instanceof LoopUnit) {
      _format((LoopUnit)rollback, document);
      return;
    } else if (rollback instanceof MultiRule) {
      _format((MultiRule)rollback, document);
      return;
    } else if (rollback instanceof MultiRuleReuseNode) {
      _format((MultiRuleReuseNode)rollback, document);
      return;
    } else if (rollback instanceof Node) {
      _format((Node)rollback, document);
      return;
    } else if (rollback instanceof PriorityUnit) {
      _format((PriorityUnit)rollback, document);
      return;
    } else if (rollback instanceof Rule) {
      _format((Rule)rollback, document);
      return;
    } else if (rollback instanceof Unit) {
      _format((Unit)rollback, document);
      return;
    } else if (rollback instanceof Attribute) {
      _format((Attribute)rollback, document);
      return;
    } else if (rollback instanceof ConditionEdge) {
      _format((ConditionEdge)rollback, document);
      return;
    } else if (rollback instanceof ConditionGraph) {
      _format((ConditionGraph)rollback, document);
      return;
    } else if (rollback instanceof EPackageImport) {
      _format((EPackageImport)rollback, document);
      return;
    } else if (rollback instanceof Edge) {
      _format((Edge)rollback, document);
      return;
    } else if (rollback instanceof Expression) {
      _format((Expression)rollback, document);
      return;
    } else if (rollback instanceof Match) {
      _format((Match)rollback, document);
      return;
    } else if (rollback instanceof Model) {
      _format((Model)rollback, document);
      return;
    } else if (rollback instanceof UnitElement) {
      _format((UnitElement)rollback, document);
      return;
    } else if (rollback instanceof EObject) {
      _format((EObject)rollback, document);
      return;
    } else if (rollback == null) {
      _format((Void)null, document);
      return;
    } else if (rollback != null) {
      _format(rollback, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rollback, document).toString());
    }
  }
}
