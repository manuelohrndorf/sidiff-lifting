/*
 * generated by Xtext
 */
package org.eclipse.emf.refactor.examples.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SimpleWebModelingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class WebModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WebModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWebmodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataLayerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataLayerDataLayerParserRuleCall_3_0 = (RuleCall)cDataLayerAssignment_3.eContents().get(0);
		private final Assignment cHypertextLayerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHypertextLayerHypertextLayerParserRuleCall_4_0 = (RuleCall)cHypertextLayerAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WebModel:
		//	"webmodel" name=ID "{" dataLayer=DataLayer hypertextLayer=HypertextLayer "}";
		@Override public ParserRule getRule() { return rule; }

		//"webmodel" name=ID "{" dataLayer=DataLayer hypertextLayer=HypertextLayer "}"
		public Group getGroup() { return cGroup; }

		//"webmodel"
		public Keyword getWebmodelKeyword_0() { return cWebmodelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//dataLayer=DataLayer
		public Assignment getDataLayerAssignment_3() { return cDataLayerAssignment_3; }

		//DataLayer
		public RuleCall getDataLayerDataLayerParserRuleCall_3_0() { return cDataLayerDataLayerParserRuleCall_3_0; }

		//hypertextLayer=HypertextLayer
		public Assignment getHypertextLayerAssignment_4() { return cHypertextLayerAssignment_4; }

		//HypertextLayer
		public RuleCall getHypertextLayerHypertextLayerParserRuleCall_4_0() { return cHypertextLayerHypertextLayerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDataLayerAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cEntitiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntitiesEntityParserRuleCall_2_0 = (RuleCall)cEntitiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataLayer:
		//	"data {" {DataLayer} entities+=Entity* "}";
		@Override public ParserRule getRule() { return rule; }

		//"data {" {DataLayer} entities+=Entity* "}"
		public Group getGroup() { return cGroup; }

		//"data {"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//{DataLayer}
		public Action getDataLayerAction_1() { return cDataLayerAction_1; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_2() { return cEntitiesAssignment_2; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_2_0() { return cEntitiesEntityParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Assignment cReferencesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReferencesReferenceParserRuleCall_4_0 = (RuleCall)cReferencesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	"entity" name=ID "{" attributes+=Attribute* references+=Reference* "}";
		@Override public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" attributes+=Attribute* references+=Reference* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }

		//references+=Reference*
		public Assignment getReferencesAssignment_4() { return cReferencesAssignment_4; }

		//Reference
		public RuleCall getReferencesReferenceParserRuleCall_4_0() { return cReferencesReferenceParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSimpleTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//	"att" name=ID ":" type=SimpleType;
		@Override public ParserRule getRule() { return rule; }

		//"att" name=ID ":" type=SimpleType
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=SimpleType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//SimpleType
		public RuleCall getTypeSimpleTypeEnumRuleCall_3_0() { return cTypeSimpleTypeEnumRuleCall_3_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEntityCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeEntityCrossReference_3_0.eContents().get(1);
		
		//Reference:
		//	"ref" name=ID ":" type=[Entity];
		@Override public ParserRule getRule() { return rule; }

		//"ref" name=ID ":" type=[Entity]
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Entity]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Entity]
		public CrossReference getTypeEntityCrossReference_3_0() { return cTypeEntityCrossReference_3_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_3_0_1() { return cTypeEntityIDTerminalRuleCall_3_0_1; }
	}

	public class HypertextLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HypertextLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHypertextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPagesPageParserRuleCall_1_0 = (RuleCall)cPagesAssignment_1.eContents().get(0);
		private final Keyword cStartPageIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartPageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStartPageStaticPageCrossReference_3_0 = (CrossReference)cStartPageAssignment_3.eContents().get(0);
		private final RuleCall cStartPageStaticPageIDTerminalRuleCall_3_0_1 = (RuleCall)cStartPageStaticPageCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//HypertextLayer:
		//	"hypertext {" pages+=Page+ "start page is" startPage=[StaticPage] "}";
		@Override public ParserRule getRule() { return rule; }

		//"hypertext {" pages+=Page+ "start page is" startPage=[StaticPage] "}"
		public Group getGroup() { return cGroup; }

		//"hypertext {"
		public Keyword getHypertextKeyword_0() { return cHypertextKeyword_0; }

		//pages+=Page+
		public Assignment getPagesAssignment_1() { return cPagesAssignment_1; }

		//Page
		public RuleCall getPagesPageParserRuleCall_1_0() { return cPagesPageParserRuleCall_1_0; }

		//"start page is"
		public Keyword getStartPageIsKeyword_2() { return cStartPageIsKeyword_2; }

		//startPage=[StaticPage]
		public Assignment getStartPageAssignment_3() { return cStartPageAssignment_3; }

		//[StaticPage]
		public CrossReference getStartPageStaticPageCrossReference_3_0() { return cStartPageStaticPageCrossReference_3_0; }

		//ID
		public RuleCall getStartPageStaticPageIDTerminalRuleCall_3_0_1() { return cStartPageStaticPageIDTerminalRuleCall_3_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Page");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStaticPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDynamicPageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Page:
		//	StaticPage | DynamicPage;
		@Override public ParserRule getRule() { return rule; }

		//StaticPage | DynamicPage
		public Alternatives getAlternatives() { return cAlternatives; }

		//StaticPage
		public RuleCall getStaticPageParserRuleCall_0() { return cStaticPageParserRuleCall_0; }

		//DynamicPage
		public RuleCall getDynamicPageParserRuleCall_1() { return cDynamicPageParserRuleCall_1; }
	}

	public class StaticPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLinksLinkParserRuleCall_3_0 = (RuleCall)cLinksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StaticPage:
		//	"static page" name=ID "{" links+=Link* "}";
		@Override public ParserRule getRule() { return rule; }

		//"static page" name=ID "{" links+=Link* "}"
		public Group getGroup() { return cGroup; }

		//"static page"
		public Keyword getStaticPageKeyword_0() { return cStaticPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//links+=Link*
		public Assignment getLinksAssignment_3() { return cLinksAssignment_3; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_3_0() { return cLinksLinkParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkToPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetPageCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetPageIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetPageCrossReference_1_0.eContents().get(1);
		
		//Link:
		//	"link to page" target=[Page];
		@Override public ParserRule getRule() { return rule; }

		//"link to page" target=[Page]
		public Group getGroup() { return cGroup; }

		//"link to page"
		public Keyword getLinkToPageKeyword_0() { return cLinkToPageKeyword_0; }

		//target=[Page]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }

		//[Page]
		public CrossReference getTargetPageCrossReference_1_0() { return cTargetPageCrossReference_1_0; }

		//ID
		public RuleCall getTargetPageIDTerminalRuleCall_1_0_1() { return cTargetPageIDTerminalRuleCall_1_0_1; }
	}

	public class DynamicPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicPage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndexPageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataPageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DynamicPage:
		//	IndexPage | DataPage;
		@Override public ParserRule getRule() { return rule; }

		//IndexPage | DataPage
		public Alternatives getAlternatives() { return cAlternatives; }

		//IndexPage
		public RuleCall getIndexPageParserRuleCall_0() { return cIndexPageParserRuleCall_0; }

		//DataPage
		public RuleCall getDataPageParserRuleCall_1() { return cDataPageParserRuleCall_1; }
	}

	public class IndexPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cShowsEntityKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_2_1_0 = (CrossReference)cEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinksLinkParserRuleCall_4_0 = (RuleCall)cLinksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IndexPage:
		//	"index page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}";
		@Override public ParserRule getRule() { return rule; }

		//"index page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}"
		public Group getGroup() { return cGroup; }

		//"index page"
		public Keyword getIndexPageKeyword_0() { return cIndexPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("shows entity" entity=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"shows entity"
		public Keyword getShowsEntityKeyword_2_0() { return cShowsEntityKeyword_2_0; }

		//entity=[Entity]
		public Assignment getEntityAssignment_2_1() { return cEntityAssignment_2_1; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_1_0() { return cEntityEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_1_0_1() { return cEntityEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//links+=Link*
		public Assignment getLinksAssignment_4() { return cLinksAssignment_4; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_4_0() { return cLinksLinkParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataPageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataPage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cShowsEntityKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_2_1_0 = (CrossReference)cEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLinksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLinksLinkParserRuleCall_4_0 = (RuleCall)cLinksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataPage:
		//	"data page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}";
		@Override public ParserRule getRule() { return rule; }

		//"data page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}"
		public Group getGroup() { return cGroup; }

		//"data page"
		public Keyword getDataPageKeyword_0() { return cDataPageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("shows entity" entity=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"shows entity"
		public Keyword getShowsEntityKeyword_2_0() { return cShowsEntityKeyword_2_0; }

		//entity=[Entity]
		public Assignment getEntityAssignment_2_1() { return cEntityAssignment_2_1; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_2_1_0() { return cEntityEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_2_1_0_1() { return cEntityEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//links+=Link*
		public Assignment getLinksAssignment_4() { return cLinksAssignment_4; }

		//Link
		public RuleCall getLinksLinkParserRuleCall_4_0() { return cLinksLinkParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	public class SimpleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEmailEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEmailEmailKeyword_1_0 = (Keyword)cEmailEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatFloatKeyword_2_0 = (Keyword)cFloatEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIntegerIntegerKeyword_3_0 = (Keyword)cIntegerEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStringStringKeyword_4_0 = (Keyword)cStringEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SimpleType:
		//	Boolean | Email | Float | Integer | String;
		public EnumRule getRule() { return rule; }

		//Boolean | Email | Float | Integer | String
		public Alternatives getAlternatives() { return cAlternatives; }

		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }

		//"Boolean"
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }

		//Email
		public EnumLiteralDeclaration getEmailEnumLiteralDeclaration_1() { return cEmailEnumLiteralDeclaration_1; }

		//"Email"
		public Keyword getEmailEmailKeyword_1_0() { return cEmailEmailKeyword_1_0; }

		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_2() { return cFloatEnumLiteralDeclaration_2; }

		//"Float"
		public Keyword getFloatFloatKeyword_2_0() { return cFloatFloatKeyword_2_0; }

		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_3() { return cIntegerEnumLiteralDeclaration_3; }

		//"Integer"
		public Keyword getIntegerIntegerKeyword_3_0() { return cIntegerIntegerKeyword_3_0; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_4() { return cStringEnumLiteralDeclaration_4; }

		//"String"
		public Keyword getStringStringKeyword_4_0() { return cStringStringKeyword_4_0; }
	}
	
	private final WebModelElements pWebModel;
	private final DataLayerElements pDataLayer;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final SimpleTypeElements unknownRuleSimpleType;
	private final ReferenceElements pReference;
	private final HypertextLayerElements pHypertextLayer;
	private final PageElements pPage;
	private final StaticPageElements pStaticPage;
	private final LinkElements pLink;
	private final DynamicPageElements pDynamicPage;
	private final IndexPageElements pIndexPage;
	private final DataPageElements pDataPage;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimpleWebModelingLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWebModel = new WebModelElements();
		this.pDataLayer = new DataLayerElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.unknownRuleSimpleType = new SimpleTypeElements();
		this.pReference = new ReferenceElements();
		this.pHypertextLayer = new HypertextLayerElements();
		this.pPage = new PageElements();
		this.pStaticPage = new StaticPageElements();
		this.pLink = new LinkElements();
		this.pDynamicPage = new DynamicPageElements();
		this.pIndexPage = new IndexPageElements();
		this.pDataPage = new DataPageElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.emf.refactor.examples.SimpleWebModelingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WebModel:
	//	"webmodel" name=ID "{" dataLayer=DataLayer hypertextLayer=HypertextLayer "}";
	public WebModelElements getWebModelAccess() {
		return pWebModel;
	}
	
	public ParserRule getWebModelRule() {
		return getWebModelAccess().getRule();
	}

	//DataLayer:
	//	"data {" {DataLayer} entities+=Entity* "}";
	public DataLayerElements getDataLayerAccess() {
		return pDataLayer;
	}
	
	public ParserRule getDataLayerRule() {
		return getDataLayerAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID "{" attributes+=Attribute* references+=Reference* "}";
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Attribute:
	//	"att" name=ID ":" type=SimpleType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum SimpleType:
	//	Boolean | Email | Float | Integer | String;
	public SimpleTypeElements getSimpleTypeAccess() {
		return unknownRuleSimpleType;
	}
	
	public EnumRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Reference:
	//	"ref" name=ID ":" type=[Entity];
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//HypertextLayer:
	//	"hypertext {" pages+=Page+ "start page is" startPage=[StaticPage] "}";
	public HypertextLayerElements getHypertextLayerAccess() {
		return pHypertextLayer;
	}
	
	public ParserRule getHypertextLayerRule() {
		return getHypertextLayerAccess().getRule();
	}

	//Page:
	//	StaticPage | DynamicPage;
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}

	//StaticPage:
	//	"static page" name=ID "{" links+=Link* "}";
	public StaticPageElements getStaticPageAccess() {
		return pStaticPage;
	}
	
	public ParserRule getStaticPageRule() {
		return getStaticPageAccess().getRule();
	}

	//Link:
	//	"link to page" target=[Page];
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//DynamicPage:
	//	IndexPage | DataPage;
	public DynamicPageElements getDynamicPageAccess() {
		return pDynamicPage;
	}
	
	public ParserRule getDynamicPageRule() {
		return getDynamicPageAccess().getRule();
	}

	//IndexPage:
	//	"index page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}";
	public IndexPageElements getIndexPageAccess() {
		return pIndexPage;
	}
	
	public ParserRule getIndexPageRule() {
		return getIndexPageAccess().getRule();
	}

	//DataPage:
	//	"data page" name=ID ("shows entity" entity=[Entity])? "{" links+=Link* "}";
	public DataPageElements getDataPageAccess() {
		return pDataPage;
	}
	
	public ParserRule getDataPageRule() {
		return getDataPageAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
